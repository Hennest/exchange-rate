<?php

declare(strict_types=1);

namespace Hennest\ExchangeRate\Contracts;

use Closure;
use InvalidArgumentException;

interface CacheInterface
{
    /**
     * Checks if the specified cache key exists in the cache.
     *
     * @param string[] $cacheKey An array of cache key components to check for in the cache.
     *
     * @throws InvalidArgumentException
     *
     * @return bool True if the cache key exists; otherwise, false.
     */
    public function exist(array $cacheKey): bool;

    /**
     * Retrieves a cached value for the specified cache key.
     *
     * @param string[] $cacheKey An array of cache key components to retrieve the cached value.
     *
     * @throws InvalidArgumentException
     *
     * @return mixed The cached value if it exists; otherwise, null.
     */
    public function get(array $cacheKey): mixed;

    /**
     * Stores a value in the cache with the specified cache key.
     *
     * @param string[] $cacheKey An array of cache key components to store the value with.
     *
     * @param mixed $value The value to be stored in the cache.
     *
     * @param int|null $cacheLifetimeInHours (Optional) The cache lifetime in hours for the stored value.
     *
     * @return bool True if the value is successfully stored; otherwise, false.
     */
    public function put(array $cacheKey, mixed $value, ?int $cacheLifetimeInHours = null): bool;

    /**
     * Removes a cached value for the specified cache key.
     *
     * @param string[] $cacheKey An array of cache key components to remove the cached value.
     *
     * @return bool True if the cached value is successfully removed; otherwise, false.
     */
    public function forget(array $cacheKey): bool;

    /**
     * Retrieves a cached value for the specified cache key or stores a new value if it doesn't exist.
     *
     * @param string[] $cacheKey An array of cache key components to retrieve or store the cached value.
     *
     * @param Closure(): array<string, string> $callback A closure that generates the value to be stored if the cache key doesn't exist.
     *
     * @param int|null $cacheLifetimeInHours (Optional) The cache lifetime in hours for the stored or retrieved value.
     *
     * @return mixed The cached value if it exists, or the value generated by the callback.
     */
    public function remember(array $cacheKey, Closure $callback, ?int $cacheLifetimeInHours = null): mixed;
}
